[
{
	"uri": "https://labbots.github.io/google-drive-upload/usage/gupload/",
	"title": "Gupload Script",
	"tags": [],
	"description": "Gupload Script usage and configurable arguments.",
	"content": "For uploading files/remote gdrive files, the syntax is simple;\ngupload filename/foldername/file_id/file_link -c gdrive_folder_name\nwhere filename/foldername is input file/folder and gdrive_folder_name is the name of the folder on gdrive, where the input file/folder will be uploaded.\nand file_id/file_link is the accessible gdrive file link or id which will be uploaded without downloading.\nIf gdrive_folder_name is present on gdrive, then script will upload there, else will make a folder with that name.\nNote: It\u0026rsquo;s not mandatory to use -c / -C / \u0026ndash;create-dir flag.\nApart from basic usage, this script provides many flags for custom usecases, like parallel uploading, skipping upload of existing files, overwriting, etc.\nUpload Script Custom Flags These are the custom flags that are currently implemented:\n  -z | \u0026ndash;config\nOverride default config file with custom config file.\nDefault Config: ${HOME}/.googledrive.conf\nIf you want to change the default value of the config path, then use this format,\ngupload --config default=your_config_file_path\n   -a | \u0026ndash;account \u0026lsquo;account name\u0026rsquo;\nUse different account than the default one.\nTo change the default account name, do\ngupload -a/--account default=account_name\n   -la | \u0026ndash;list-accounts\nPrint all configured accounts in the config files.\n   -ca | \u0026ndash;create-account \u0026lsquo;account name\u0026rsquo;\nTo create a new account with the given name if does not already exists. If the given account exists then script will ask for a new name.\nNote 1: Only for interactive terminal usage.\nNote 2: This flag is preferred over --account.\n   -da | \u0026ndash;delete-account \u0026lsquo;account name\u0026rsquo;\nTo delete an account information from config file.\n   -c | -C | \u0026ndash;create-dir \nOption to create directory. Will provide folder id. Can be used to specify workspace folder for uploading files/folders.\nIf this option is used, then input file is optional.\n   -r | \u0026ndash;root-dir \u0026lt;google_folderid\u0026gt;\nGoogle folder id or url to which the file/directory to upload.\nIf you want to change the default value of the rootdir stored in config, then use this format,\ngupload --root-dir default=root_folder_[id/url]\n   -s | \u0026ndash;skip-subdirs\nSkip creation of sub folders and upload all files inside the INPUT folder/sub-folders in the INPUT folder, use this along with -p/\u0026ndash;parallel option to speed up the uploads.\n   -p | \u0026ndash;parallel \u0026lt;no_of_files_to_parallely_upload\u0026gt;\nUpload multiple files in parallel, Max value = 10, use with folders.\nNote:\n This command is only helpful if you are uploading many files which aren\u0026rsquo;t big enough to utilise your full bandwidth, using it otherwise will not speed up your upload and even error sometimes, 1 - 6 value is recommended, but can use upto 10. If errors with a high value, use smaller number. Beaware, this isn\u0026rsquo;t magic, obviously it comes at a cost of increased cpu/ram utilisation as it forks multiple shell processes to upload ( google how xargs works with -P option ).     -o | \u0026ndash;overwrite\nOverwrite the files with the same name, if present in the root folder/input folder, also works with recursive folders and single/multiple files.\nNote: If you use this flag along with -d/\u0026ndash;skip-duplicates, the skip duplicates flag is preferred.\n   -desc | \u0026ndash;description | \u0026ndash;description-all \u0026lsquo;description\u0026rsquo;\nSpecify description for the given file.\nTo use the respective metadata of a file, below is the format:\nFile name ( fullname ): %f Size: %s Mime Type: %m\nNow to actually use it: --description 'Filename: %f, Size: %s, Mime: %m'\nNote: For files inside folders, use --description-all flag.\n   -d | \u0026ndash;skip-duplicates\nDo not upload the files with the same name, if already present in the root folder/input folder, also works with recursive folders.\n   -f | \u0026ndash;file/folder\nSpecify files and folders explicitly in one command, use multiple times for multiple folder/files.\nFor uploading multiple input into the same folder:\n  Use -C / \u0026ndash;create-dir ( e.g ./upload.sh -f file1 -f folder1 -f file2 -C \u0026lt;folder_wherw_to_upload\u0026gt; ) option.\n  Give two initial arguments which will use the second argument as the folder you wanna upload ( e.g: ./upload.sh filename \u0026lt;folder_where_to_upload\u0026gt; -f filename -f foldername ).\nThis flag can also be used for uploading files/folders which have - character in their name, normally it won\u0026rsquo;t work, because of the flags, but using -f -[file|folder]namewithhyphen works. Applies for -C/\u0026ndash;create-dir too.\nAlso, as specified by longflags ( --[file|folder] ), you can simultaneously upload a folder and a file.\nIncase of multiple -f flag having duplicate arguments, it takes the last duplicate of the argument to upload, in the same order provided.\n     -cl | \u0026ndash;clone\nUpload a gdrive file without downloading, require accessible gdrive link or id as argument.\n   -S | \u0026ndash;share \u0026lt;optional_email_address\u0026gt;\nShare the uploaded input file/folder, grant reader permission to provided email address or to everyone with the shareable link.\n   -SM | -sm | \u0026ndash;share-mode \u0026lsquo;share mode\u0026rsquo;\nSpecify the share mode for sharing file.\nShare modes are:\n r / reader - Read only permission. w / writer - Read and write permission. c / commenter - Comment only permission.  Note: Although this flag is independent of \u0026ndash;share flag but when email is needed, then \u0026ndash;share flag use is neccessary.\n   \u0026ndash;speed \u0026lsquo;speed\u0026rsquo;\nLimit the download speed, supported formats: 1K, 1M and 1G.\n   -R | \u0026ndash;retry \u0026lsquo;num of retries\u0026rsquo;\nRetry the file upload if it fails, postive integer as argument. Currently only for file uploads.\n   -in | \u0026ndash;include \u0026lsquo;pattern\u0026rsquo;\nOnly include the files with the given pattern to upload - Applicable for folder uploads.\ne.g: gupload local_folder \u0026ndash;include \u0026ldquo;1\u0026rdquo;, will only include the files with pattern \u0026lsquo;1\u0026rsquo; in the name.\nNote: Only provide patterns which are supported by find -name option.\n   -ex | \u0026ndash;exclude \u0026lsquo;pattern\u0026rsquo;\ne.g: gupload local_folder \u0026ndash;exclude \u0026ldquo;1\u0026rdquo;, will exclude all the files with pattern \u0026lsquo;1\u0026rsquo; in the name.\nNote: Only provide patterns which are supported by find -name option.\n   \u0026ndash;hide\nThis flag will prevent the script to print sensitive information like root folder id or drivelink\n   -q | \u0026ndash;quiet\nSupress the normal output, only show success/error upload messages for files, and one extra line at the beginning for folder showing no. of files and sub folders.\n   -v | \u0026ndash;verbose\nDislay detailed message (only for non-parallel uploads).\n   -V | \u0026ndash;verbose-progress\nDisplay detailed message and detailed upload progress(only for non-parallel uploads).\n   \u0026ndash;skip-internet-check\nDo not check for internet connection, recommended to use in sync jobs.\n   -i | \u0026ndash;save-info \u0026lt;file_to_save_info\u0026gt;\nSave uploaded files info to the given filename.\u0026quot;\n   -u | \u0026ndash;update\nUpdate the installed script in your system, if not installed, then install.\n   \u0026ndash;uninstall\nUninstall the script from your system.\n   \u0026ndash;info\nShow detailed info, only if script is installed system wide.\n   -h | \u0026ndash;help\nDisplay usage instructions.\n   -D | \u0026ndash;debug\nDisplay script command trace.\n   Multiple Inputs For using multiple inputs at a single time, you can use the -f/--file/--folder or -cl/--clone flag as explained above.\nNow, to achieve multiple inputs without flag, you can just use glob or just give them as arguments.\ne.g:\n  gupload a b c d\na/b/c/d will be treated as file/folder/gdrive_link_or_id.\n   gupload *mp4 *mkv\nThis will upload all the mp4 and mkv files in the folder, if any.\nTo upload all files, just use *. For more info, google how globs work in shell.\n   gupload a b -d c d -c e\na/b/c/d will be treated as file/folder/gdrive_link_or_id and e as gdrive_folder.\n   Resuming Interrupted Uploads Uploads interrupted either due to bad internet connection or manual interruption, can be resumed from the same position.\n Script checks 3 things, filesize, name and workspace folder. If an upload was interrupted, then resumable upload link is saved in \u0026quot;$HOME/.google-drive-upload/\u0026quot;, which later on when running the same command as before, if applicable, resumes the upload from the same position as before. Small files cannot be resumed, less that 1 MB, and the amount of size uploaded should be more than 1 MB to resume. No progress bars for resumable uploads as it messes up with output. You can interrupt many times you want, it will resume ( hopefully ).  "
},
{
	"uri": "https://labbots.github.io/google-drive-upload/setup/install/",
	"title": "Installation",
	"tags": [],
	"description": "Installation procedure to setup gupload script.",
	"content": "You can install the script by automatic installation script provided in the repository.\nThis will also install the synchronisation script provided in the repo.\nInstallation script also checks for the native dependencies.\nDefault values set by automatic installation script, which are changeable:\nRepo: labbots/google-drive-upload\nCommand name: gupload\nSync command name: gsync\nInstallation path: $HOME/.google-drive-upload\nSource: release { can be branch }\nSource value: latest { can be branchname }\nShell file: .bashrc or .zshrc or .profile\nFor custom command names, repo, shell file, etc, see advanced installation method.\nNow, for automatic install script, there are two ways:\nBasic Method To install google-drive-upload in your system, you can run the below command:\ncurl --compressed -Ls https://github.com/labbots/google-drive-upload/raw/master/install.sh | sh -s and done.\nAdvanced Method This section provides information on how to utilise the install.sh script for custom usescases.\nThese are the flags that are available in the install.sh script:\n  -p | \u0026ndash;path \u0026lt;dir_name\u0026gt;\nCustom path where you want to install the script.\nNote: For global installs, give path outside of the home dir like /usr/bin and it must be in the executable path already.\n   -c | \u0026ndash;cmd \u0026lt;command_name\u0026gt;\nCustom command name, after installation, script will be available as the input argument.\nTo change sync command name, use install sh -c gupload sync=\u0026lsquo;gsync\u0026rsquo;\n   -r | \u0026ndash;repo \u0026lt;Username/reponame\u0026gt;\nInstall script from your custom repo, e.g \u0026ndash;repo labbots/google-drive-upload, make sure your repo file structure is same as official repo.\n   -B | \u0026ndash;branch \u0026lt;branch_name\u0026gt;\nSpecify branch name for the github repo, applies to custom and default repo both.\n   -R | \u0026ndash;release \u0026lt;tag/release_tag\u0026gt;\nSpecify tag name for the github repo, applies to custom and default repo both.\n   -t | \u0026ndash;time \u0026lsquo;no of days\u0026rsquo;\nSpecify custom auto update time ( given input will taken as number of days ) after which script will try to automatically update itself.\nDefault: 5 ( 5 days )\n   -s | \u0026ndash;shell-rc \u0026lt;shell_file\u0026gt;\nSpecify custom rc file, where PATH is appended, by default script detects .zshrc, .bashrc. and .profile.\n   \u0026ndash;sh | \u0026ndash;posix\nForce install posix scripts even if system has compatible bash binary present.\n   -q | \u0026ndash;quiet\nOnly show critical error/sucess logs.\n   -U | \u0026ndash;uninstall\nUninstall the script and remove related files.\\n\n   -D | \u0026ndash;debug\nDisplay script command trace.\n   -h | \u0026ndash;help\nDisplay usage instructions.\n   Now, run the script and use flags according to your usecase.\nE.g:\ncurl --compressed -Ls https://github.com/labbots/google-drive-upload/raw/master/install.sh | sh -s -- -r username/reponame -p somepath -s shell_file -c command_name -B branch_name "
},
{
	"uri": "https://labbots.github.io/google-drive-upload/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Basics Following section provides basic information about google drive upload script and system compatability information.\n Compatability   Dependencies   "
},
{
	"uri": "https://labbots.github.io/google-drive-upload/",
	"title": "Google Drive Upload",
	"tags": [],
	"description": "Bash scripts to upload files to google drive.",
	"content": "Google drive upload is a collection of shell scripts runnable on all POSIX compatible shells ( sh / ksh / dash / bash / zsh / etc ).\nIt utilizes google drive api v3 and google OAuth2.0 to generate access tokens and to authorize application for uploading files/folders to your google drive.\n Minimal Upload or Update files/folders Recursive folder uploading Sync your folders Sync with overwrite or skip existing files support. Resume Interrupted Uploads Share files/folders to anyone or a specific email. Config file support Easy to use on multiple operating system. Support for multiple accounts in a single config. Latest gdrive api used i.e v3 Pretty logging Easy to install and update  Self update Auto update Can be per-user and invoked per-shell, hence no root access required or global install with root access.   An additional sync script for background synchronisation jobs. Read Synchronisation section for more info.  "
},
{
	"uri": "https://labbots.github.io/google-drive-upload/setup/initial_setup/",
	"title": "Initial Setup",
	"tags": [],
	"description": "Initial setup guide.",
	"content": "First, we need to obtain our oauth credentials, here\u0026rsquo;s how to do it:\nGenerating Oauth Credentials  Follow Enable Drive API section. Open google console. Click on \u0026ldquo;Credentials\u0026rdquo;. Click \u0026ldquo;Create credentials\u0026rdquo; and select oauth client id. Select Application type \u0026ldquo;Desktop app\u0026rdquo; or \u0026ldquo;other\u0026rdquo;. Provide name for the new credentials. ( anything ) This would provide a new Client ID and Client Secret. Download your credentials.json by clicking on the download button.  Now, we have obtained our credentials, move to the First run section to use those credentials:\nEnable Drive API  Log into google developer console at google console. Click select project at the right side of \u0026ldquo;Google Cloud Platform\u0026rdquo; of upper left of window.  If you cannot see the project, please try to access to https://console.cloud.google.com/cloud-resource-manager.\nYou can also create new project at there. When you create a new project there, please click the left of \u0026ldquo;Google Cloud Platform\u0026rdquo;. You can see it like 3 horizontal lines.\nBy this, a side bar is opened. At there, select \u0026ldquo;API \u0026amp; Services\u0026rdquo; -\u0026gt; \u0026ldquo;Library\u0026rdquo;. After this, follow the below steps:\n Click \u0026ldquo;NEW PROJECT\u0026rdquo; and input the \u0026ldquo;Project Name\u0026rdquo;. Click \u0026ldquo;CREATE\u0026rdquo; and open the created project. Click \u0026ldquo;Enable APIs and get credentials like keys\u0026rdquo;. Go to \u0026ldquo;Library\u0026rdquo; Input \u0026ldquo;Drive API\u0026rdquo; in \u0026ldquo;Search for APIs \u0026amp; Services\u0026rdquo;. Click \u0026ldquo;Google Drive API\u0026rdquo; and click \u0026ldquo;ENABLE\u0026rdquo;.  Go back to oauth credentials setup\nFirst Run On first run, the script asks for all the required credentials, which we have obtained in the previous section.\nExecute the script: gupload filename\nNow, it will ask for following credentials:\nClient ID: Copy and paste from credentials.json\nClient Secret: Copy and paste from credentials.json\nRefresh Token: If you have previously generated a refresh token authenticated to your account, then enter it, otherwise leave blank. If you don\u0026rsquo;t have refresh token, script outputs a URL on the terminal script, open that url in a web browser and tap on allow. Copy the code and paste in the terminal.\nRoot Folder: Gdrive folder url/id from your account which you want to set as root folder. You can leave it blank and it takes root folder as default.\nIf everything went fine, all the required credentials have been set, read the next section on how to upload a file/folder.\n"
},
{
	"uri": "https://labbots.github.io/google-drive-upload/setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": "Installation \u0026amp; Setup Guide This section provides instructions on how to install and configure gupload script.\n Installation   Initial Setup   Update   Configuration   Uninstallation   "
},
{
	"uri": "https://labbots.github.io/google-drive-upload/usage/sync/",
	"title": "Sync Script",
	"tags": [],
	"description": "Sync Script usage and configurable arguments.",
	"content": "This repo also provides an additional script ( sync.bash or sync.sh ) to utilise gupload for synchronisation jobs, i.e background jobs.\nBasic Usage To create a sync job, just run\ngsync folder_name -d gdrive_folder\nHere, folder_name is the local folder you want to sync and gdrive_folder is google drive folder name.\nIn the local folder, all the contents present or added in the future will be automatically uploaded.\nNote: Giving gdrive_folder is optional, if you don\u0026rsquo;t specify a name with -d/\u0026ndash;directory flags, then it will upload in the root folder set by gupload command.\nAlso, gdrive folder creation works in the same way as gupload command.\nDefault wait time: 3 secs ( amount of time to wait before checking new files ).\nDefault gupload arguments: None ( see -a/\u0026ndash;arguments section below ).\nSync Script Custom Flags Read this section thoroughly to fully utilise the sync script, feel free to open an issue if any doubts regarding the usage.\n  -d | \u0026ndash;directory\nSpecify gdrive folder name, if not specified then local folder name is used.\n   -j | \u0026ndash;jobs\nSee all background jobs that were started and still running.\nUse -j/\u0026ndash;jobs v/verbose to show additional information for jobs.\nAdditional information includes: CPU usage \u0026amp; Memory usage and No. of failed \u0026amp; successful uploads.\n   -p | \u0026ndash;pid\nSpecify a pid number, used for \u0026ndash;jobs or \u0026ndash;kill or \u0026ndash;info flags, multiple usage allowed.\n   -i | \u0026ndash;info\nPrint information for a specific job. These are the methods to do it:\n  By specifying local folder and gdrive folder of an existing job,\ne.g: gsync local_folder -d gdrive folder -i\n  By specifying pid number,\ne.g: gsync -i -p pid_number\n  To show info of multiple jobs, use this flag multiple times,\ne.g: gsync -i pid1 -p pid2 -p pid3. You can also use it with multiple inputs by adding this flag.\n     -k | \u0026ndash;kill\nKill background jobs, following are methods to do it:\n  By specifying local_folder and gdrive_folder,\ne.g. gsync local_folder -d gdrive_folder -k, will kill that specific job.\n  pid ( process id ) number can be used as an additional argument to kill a that specific job,\ne.g: gsync -k -p pid_number.\n  To kill multiple jobs, use this flag multiple times,\ne.g: gsync -k pid1 -p pid2 -p pid3. You can also using it with multiple inputs with this flag.\n  This flag can also be used to kill all the jobs,\ne.g: gsync -k all. This will stop all the background jobs running.\n     -t | \u0026ndash;time time_in_seconds\nThe amount of time that sync will wait before checking new files in the local folder given to sync job.\ne.g: gsync -t 4 local_folder, here 4 is the wait time.\nTo set default time, use gsync local_folder -t default=4, it will stored in your default config.\n   -l | \u0026ndash;logs\nTo show the logs after starting a job or show log of existing job.\nThis option can also be used to make a job sync on foreground, rather in background, thus ctrl + c or ctrl +z can exit the job.\n  By specifying local_folder and gdrive_folder,\ne.g. gsync local_folder -d gdrive_folder -l, will show logs of that specific job.\n  pid ( process id ) number can be used as an additional argument to show logs of a specific job,\ne.g: gsync -l -p pid_number.\n  Note: If used with multiple inputs or pid numbers, then only first pid/input log is shown, as it goes on indefinitely.\n   -a | \u0026ndash;arguments\nAs the script uses gupload, you can specify custom flags for background job,\ne.g: gsync local_folder -a '-q -p 4 -d'\nTo set some arguments by default, use gsync -a default='-q -p 4 -d'.\nIn this example, will skip existing files, 4 parallel upload in case of folder.\n   -fg | \u0026ndash;foreground\nThis will run the job in foreground and show the logs.\nNote: A already running job cannot be resumed in foreground, it will just show the existing logs.\n   -in | \u0026ndash;include \u0026lsquo;pattern\u0026rsquo;\nOnly include the files with the given pattern to upload.\ne.g: gsync local_folder \u0026ndash;include \u0026ldquo;1\u0026rdquo;, will only include the files with pattern \u0026lsquo;1\u0026rsquo; in the name.\\n\nNote: Only provide patterns which are supported by grep, and supported by -E option.\n   -ex | \u0026ndash;exclude \u0026lsquo;pattern\u0026rsquo;\nExclude the files with the given pattern from uploading.\ne.g: gsync local_folder \u0026ndash;exclude \u0026ldquo;1\u0026rdquo;, will exclude all the files with pattern \u0026lsquo;1\u0026rsquo; in the name.\\n\nNote: Only provide patterns which are supported by grep, and supported by -E option.\n   -c | \u0026ndash;command command_name\nIncase if gupload command installed with any other name or to use in systemd service, which requires fullpath.\n   \u0026ndash;sync-detail-dir \u0026lsquo;dirname\u0026rsquo;\nDirectory where a job information will be stored.\nDefault: ${HOME}/.google-drive-upload\n  -s | \u0026ndash;service \u0026lsquo;service name\u0026rsquo;\nTo generate systemd service file to setup background jobs on boot.\nNote: If this command is used, then only service files are created, no other work is done.\n   -d | \u0026ndash;debug\nDisplay script command trace, use before all the flags to see maximum script trace.\n   Note: Flags that use pid number as input should be used at last, if you are not intending to provide pid number, say in case of a folder name with positive integers.\nBackground Sync Jobs There are basically two ways to start a background job, first one we already covered in the above section.\nIt will indefinitely run until and unless the host machine is rebooted.\nNow, a systemd service service can also be created which will start sync job after boot.\n  To generate a systemd unit file, run the sync command with --service service_name at the end.\ne.g: If gsync foldername -d drive_folder --service myservice, where, myservice can be any name desired.\nThis will generate a script and print the next required commands to start/stop/enable/disable the service.\nThe commands that will be printed is explained below:\n  First add the service to the system by bash \u0026quot;gsync-test.service.sh\u0026quot; add, where gsync-test is the service name.\n  Start the service bash \u0026quot;gsync-test.service.sh\u0026quot; start.\nThis is same as starting a sync job with command itself as mentioned in previous section.\nTo stop: bash \u0026quot;gsync-test.service.sh\u0026quot; stop\n  If you want the job to automatically start on boot, run bash \u0026quot;gsync-test.service.sh\u0026quot; enable\nTo disable: bash \u0026quot;gsync-test.service.sh\u0026quot; disable\n  To see logs after a job has been started.\nbash \u0026quot;gsync-test.service.sh\u0026quot; logs\n  To remove a job from system, bash \u0026quot;gsync-test.service.sh\u0026quot; remove\n  You can use multiple commands at once, e.g: bash \u0026quot;gsync-test.service.sh\u0026quot; start logs, will start and show the logs.\nNote: To print the systemd service, use bash \u0026quot;gsync-test.service.sh\u0026quot; print.\nNote: The script is merely a wrapper, it uses systemctl to start/stop/enable/disable the service and journalctl is used to show the logs.\nExtras: A sample service file has been provided in the repo just for reference, it is recommended to use gsync to generate the service file.\n"
},
{
	"uri": "https://labbots.github.io/google-drive-upload/setup/update/",
	"title": "Update",
	"tags": [],
	"description": "Method to update gupload.",
	"content": "If you have followed the automatic method to install the script, then you can automatically update the script.\nThere are two methods:\n  Use the script itself to update the script.\ngupload -u or gupload --update\nThis will update the script where it is installed.\nIf you use the this flag without actually installing the script,\ne.g just by sh upload.sh -u then it will install the script or update if already installed.\n  Run the installation script again.\nYes, just run the installation script again as we did in install section, and voila, it\u0026rsquo;s done.\n  Automatic updates\nBy default, script checks for update after 5 days. Use -t / \u0026ndash;time flag of install.sh to modify the interval.\n  Note: Above methods always obey the values set by user in advanced installation, e.g if you have installed the script with different repo, say myrepo/gdrive-upload, then the update will be also fetched from the same repo.\n"
},
{
	"uri": "https://labbots.github.io/google-drive-upload/usage/",
	"title": "Usage",
	"tags": [],
	"description": "",
	"content": "Usage Guide This section provides instructions on how to use gupload and sync script.\n Gupload Script   Sync Script   "
},
{
	"uri": "https://labbots.github.io/google-drive-upload/setup/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "Configuration file of gupload.",
	"content": "After first run, the credentials are saved in config file. By default, the config file is ${HOME}/.googledrive.conf.\nTo change the default config file or use a different one temporarily, see -z / --config custom in Upload Script Custom Flags.\nThis is the format of a config file:\nACCOUNT_default_CLIENT_ID=\u0026#34;client id\u0026#34; ACCOUNT_default_CLIENT_SECRET=\u0026#34;client secret\u0026#34; ACCOUNT_default_REFRESH_TOKEN=\u0026#34;refresh token\u0026#34; SYNC_DEFAULT_ARGS=\u0026#34;default args of gupload command for gsync\u0026#34; ACCOUNT_default_ROOT_FOLDER_NAME=\u0026#34;root folder name\u0026#34; ACCOUNT_default_ROOT_FOLDER=\u0026#34;root folder id\u0026#34; ACCOUNT_default_ACCESS_TOKEN=\u0026#34;access token\u0026#34; ACCOUNT_default_ACCESS_TOKEN_EXPIRY=\u0026#34;access token expiry\u0026#34; where default is the name of the account.\nYou can use a config file in multiple machines, the values that are explicitly required are CLIENT_ID, CLIENT_SECRET and REFRESH_TOKEN.\nIf ROOT_FOLDER is not set, then it is asked if running in an interactive terminal, otherwise root is used.\nROOT_FOLDER_NAME, ACCESS_TOKEN and ACCESS_TOKEN_EXPIRY are automatically generated using REFRESH_TOKEN.\nSYNC_DEFAULT_ARGS is optional.\nA pre-generated config file can be also used where interactive terminal access is not possible, like Continuous Integration, docker, jenkins, etc\nJust have to print values to \u0026quot;${HOME}/.googledrive.conf\u0026quot;, e.g:\nprintf \u0026#34;%s\\n\u0026#34; \u0026#39; ACCOUNT_default_CLIENT_ID=\u0026#34;client id\u0026#34; ACCOUNT_default_CLIENT_SECRET=\u0026#34;client secret\u0026#34; ACCOUNT_default_REFRESH_TOKEN=\u0026#34;refresh token\u0026#34; \u0026#39; \u0026gt;| \u0026#34;${HOME}/.googledrive.conf\u0026#34; Note: If you have an old config, then nothing extra is needed, just need to run the script once and the default config will be automatically converted to the new format.\n"
},
{
	"uri": "https://labbots.github.io/google-drive-upload/setup/uninstall/",
	"title": "Uninstallation",
	"tags": [],
	"description": "Uninstallation procedure for gupload.",
	"content": "If you have followed the automatic method to install the script, then you can automatically uninstall the script.\nThere are two methods:\n  Use the script itself to uninstall the script.\ngupload -U or gupload --uninstall\nThis will remove the script related files and remove path change from shell file.\n  Run the installation script again with -U/\u0026ndash;uninstall flag\ncurl --compressed -Ls https://github.com/labbots/google-drive-upload/raw/master/install.sh | sh -s -- --uninstall Yes, just run the installation script again with the flag and voila, it\u0026rsquo;s done.\n  Note: Above methods always obey the values set by user in advanced installation.\n"
},
{
	"uri": "https://labbots.github.io/google-drive-upload/basics/compatability/",
	"title": "Compatability",
	"tags": [],
	"description": "",
	"content": "As this is a collection of shell scripts, there aren\u0026rsquo;t many dependencies. See Native Dependencies for explicitly required program list.\nLinux or MacOS For Linux or MacOS, you hopefully don\u0026rsquo;t need to configure anything extra, it should work by default.\nAndroid Install Termux and done.\nIt\u0026rsquo;s fully tested for all usecases of this script.\niOS Install iSH\nWhile it has not been officially tested, but should work given the description of the app. Report if you got it working by creating an issue.\nWindows Use Windows Subsystem\nAgain, it has not been officially tested on windows, there shouldn\u0026rsquo;t be anything preventing it from working. Report if you got it working by creating an issue.\n"
},
{
	"uri": "https://labbots.github.io/google-drive-upload/basics/dependencies/",
	"title": "Dependencies",
	"tags": [],
	"description": "",
	"content": "This repo contains two types of scripts, posix compatible and bash compatible.\nThese programs are required in both bash and posix scripts.   Program Role In Script     curl All network requests   file or mimetype Mimetype generation for extension less files   find To find files and folders for recursive folder uploads   xargs For parallel uploading   mkdir To create folders   rm To remove files and folders   grep Miscellaneous   sed Miscellaneous   mktemp To generate temporary files ( optional )   sleep Self explanatory   ps To manage different processes    If BASH is not available or BASH is available but version is less tham 4.x, then below programs are also required:   Program Role In Script     awk For url encoding in doing api requests   date For installation, update and Miscellaneous   cat Miscellaneous   stty or zsh or tput To determine column size ( optional )    These are the additional programs needed for synchronisation script:   Program Role In Script     tail To show indefinite logs    "
},
{
	"uri": "https://labbots.github.io/google-drive-upload/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://labbots.github.io/google-drive-upload/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]